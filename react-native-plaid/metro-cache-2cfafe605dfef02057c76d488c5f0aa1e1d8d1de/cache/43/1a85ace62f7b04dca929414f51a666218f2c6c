__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/mnt/c/Users/kooln/code/react/react-native-plaid/broke/react-native-plaid/node_modules/react-native-plaid-link/index.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _propTypes = _require(_dependencyMap[3], "prop-types");

  var _object = _require(_dependencyMap[4], "object.omit");

  var _object2 = _interopRequireDefault(_object);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    PlaidAuthenticator: {
      displayName: "PlaidAuthenticator"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/mnt/c/Users/kooln/code/react/react-native-plaid/broke/react-native-plaid/node_modules/react-native-plaid-link/index.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var PlaidAuthenticator = _wrapComponent("PlaidAuthenticator")(function (_Component) {
    _inherits(PlaidAuthenticator, _Component);

    function PlaidAuthenticator() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, PlaidAuthenticator);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PlaidAuthenticator.__proto__ || Object.getPrototypeOf(PlaidAuthenticator)).call.apply(_ref, [this].concat(args))), _this), _this.onMessage = function (e) {
        _this.props.onMessage(JSON.parse(e.nativeEvent.data));
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(PlaidAuthenticator, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            publicKey = _props.publicKey,
            selectAccount = _props.selectAccount,
            env = _props.env,
            product = _props.product,
            clientName = _props.clientName,
            webhook = _props.webhook,
            style = _props.style,
            token = _props.token;
        var uri = "https://cdn.plaid.com/link/v2/stable/link.html?key=" + publicKey + "&apiVersion=v2&env=" + env + "&product=" + product + "&clientName=" + clientName + "&isWebView=true&isMobile=true&selectAccount=" + selectAccount;
        uri = token !== undefined ? uri + "&token=" + token : uri;
        uri = webhook !== undefined ? uri + "&webhook=" + webhook : uri;
        return _react3.default.createElement(_reactNative.WebView, _extends({}, (0, _object2.default)(this.props, ['publicKey', 'selectAccount', 'env', 'product', 'clientName', 'webhook', 'token', 'ref']), {
          ref: this.props.plaidRef,
          source: {
            uri: uri
          },
          onMessage: this.onMessage,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 30
          }
        }));
      }
    }]);

    return PlaidAuthenticator;
  }(_react2.Component));

  PlaidAuthenticator.defaultProps = {
    publicKey: _propTypes.PropTypes.string.isRequired,
    onMessage: _propTypes.PropTypes.func.isRequired,
    env: _propTypes.PropTypes.string.isRequired,
    product: _propTypes.PropTypes.string.isRequired,
    clientName: _propTypes.PropTypes.string,
    webhook: _propTypes.PropTypes.string,
    plaidRef: _propTypes.PropTypes.func
  };
  PlaidAuthenticator.defaultProps = {
    clientName: '',
    plaidRef: function plaidRef() {}
  };
  exports.default = PlaidAuthenticator;
});